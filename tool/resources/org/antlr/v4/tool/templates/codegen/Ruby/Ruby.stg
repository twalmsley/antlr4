/*
 * Copyright (c) 2012-2019 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

rubyTypeInitMap ::= [
	"bool":"false",
	"int":"0",
	"float":"0.0",
	"str":"",
	default:"{}" // anything other than a primitive type is an object
]

// args must be <object-model-object>, <fields-resulting-in-STs>

ParserFile(file, parser, namedActions, contextSuperClass) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>

require 'antlr4/runtime'

<if(file.genPackage)>
module <file.genPackage>
<endif>

<if(file.genListener)>
@@the<file.grammarName>Listener = <file.grammarName>Listener.new
<endif>
<if(file.genVisitor)>
@@the<file.grammarName>Visitor = <file.grammarName>Visitor.new
<endif>

<namedActions.header>

<parser>

<if(file.genPackage)>
end
<endif>
>>

ListenerFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<if(file.genPackage)>
module <file.genPackage>
<endif>
<header>
require 'antlr4/runtime'

class <file.grammarName>Listener \< Antlr4::Runtime::ParseTreeListener
	<file.listenerNames:{lname |

def enter<lname; format="cap">(ctx)
end

def exit<lname; format="cap">(ctx)
end
}; separator="\n">
end
<if(file.genPackage)>
end
<endif>
>>

BaseListenerFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
<header>
require 'antlr4/runtime'

<if(file.genPackage)>
module <file.genPackage>
<endif>

class <file.grammarName>BaseListener \< <file.grammarName>Listener
	<file.listenerNames:{lname |

 def enter<lname; format="cap">(ctx)
 end

 def exit<lname; format="cap">(ctx)
 end}; separator="\n">

 def enter_every_rule(ctx)
 end

 def exit_every_rule(ctx)
 end

 def visit_terminal(node)
 end

 def visit_error_node(node)
 end

end
<if(file.genPackage)>
end
<endif>

>>

VisitorFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>
require 'antlr4/runtime'

<if(file.genPackage)>
module <file.genPackage>
<endif>
<header>

class <file.grammarName>Visitor \< Antlr4::Runtime::ParseTreeVisitor
	<file.visitorNames:{lname |
def visit<lname; format="cap">(ctx)
end}; separator="\n">
end
<if(file.genPackage)>
end
<endif>

>>

BaseVisitorFile(file, header, namedActions) ::= <<
<fileHeader(file.grammarFileName, file.ANTLRVersion)>

require 'antlr4/runtime'


<if(file.genPackage)>
module <file.genPackage>
<endif>
<header>

 class <file.grammarName>BaseVisitor \< Antlr4::Runtime::AbstractParseTreeVisitor
	<file.visitorNames:{lname |
def visit<lname; format="cap">( ctx)
 return visit_children(ctx)
 end
 }; separator="\n">

end
<if(file.genPackage)>
end
<endif>

>>

fileHeader(grammarFileName, ANTLRVersion) ::= <<
# Generated from <grammarFileName; format="java-escape"> by ANTLR <ANTLRVersion>
>>

Parser(parser, funcs, atn, sempredFuncs, superClass) ::= <<
<Parser_(ctor="parser_ctor", ...)>
>>

Parser_(parser, funcs, atn, sempredFuncs, ctor, superClass) ::= <<

class <parser.name> \< <superClass; null="Antlr4::Runtime::Parser">

	class \<\< self
		@@_decisionToDFA = []
	end
	@@_sharedContextCache = Antlr4::Runtime::PredictionContextCache.new()
	<if(parser.tokens)>
		<parser.tokens:{k | <k>=<parser.tokens.(k)>}; separator="\n", wrap, anchor>
	<endif>
		<parser.rules:{r | RULE_<r.name> = <r.index>}; separator="\n", wrap, anchor>

	@@ruleNames = [
			<parser.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
	]

	<vocabulary(parser.literalNames, parser.symbolicNames)>

	def getGrammarFileName()
	 return "<parser.grammarFileName; format="java-escape">"
	end

	def rule_names()
	 return @@ruleNames
	end

	def serialized_atn()
	 return @@_serializedATN
	end

	def atn()
	 return @@_ATN
	end

	<namedActions.members>
	<parser:(ctor)()>
	<funcs; separator="\n">

<if(sempredFuncs)>
	def sempred( _localctx,  ruleIndex,  predIndex)
		case (ruleIndex)
		<parser.sempredFuncs.values:{f|
when <f.ruleIndex>
	return <f.name>_sempred(_localctx, predIndex)}; separator="\n">
		end
		return true
	end
	<sempredFuncs.values; separator="\n">
<endif>

	<atn>
end
>>

vocabulary(literalNames, symbolicNames) ::= <<
@@_LITERAL_NAMES = [
		<literalNames:{t | <t>}; null="nil", separator=", ", wrap, anchor>
]

@@_SYMBOLIC_NAMES = [
		<symbolicNames:{t | <t>}; null="nil", separator=", ", wrap, anchor>
]

@@VOCABULARY =  Antlr4::Runtime::VocabularyImpl.new(@@_LITERAL_NAMES, @@_SYMBOLIC_NAMES)

def get_vocabulary
	@@VOCABULARY
end
>>

dumpActions(recog, argFuncs, actionFuncs, sempredFuncs) ::= <<
<if(actionFuncs)>

def action( _localctx,  ruleIndex,  actionIndex)
	case (ruleIndex)
	<recog.actionFuncs.values:{f|
when <f.ruleIndex>
	<f.name>_action(_localctx, actionIndex);
	}; separator="\n">
	end
end
<actionFuncs.values; separator="\n">
<endif>
<if(sempredFuncs)>

def sempred( _localctx,  ruleIndex,  predIndex)
	case (ruleIndex)
	<recog.sempredFuncs.values:{f|
when <f.ruleIndex>
	return <f.name>_sempred(_localctx, predIndex)}; separator="\n">
	end
	return true
end
<sempredFuncs.values; separator="\n">
<endif>
>>

parser_ctor(p) ::= <<
def initialize( input)
	super(input)
	i = 0
	while i \< @@_ATN.number_of_decisions()
		@@_decisionToDFA[i] = Antlr4::Runtime::DFA.new(@@_ATN.decision_state(i), i)
		i+=1
	end

	@_interp =  Antlr4::Runtime::ParserATNSimulator.new(self,@@_ATN,@@_decisionToDFA,@@_sharedContextCache)
end
>>

/* This generates a private method since the actionIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleActionFunction(r, actions) ::= <<
def <r.name>_action( _localctx,  actionIndex)
	case (actionIndex)
	<actions:{index|
when <index>
	<actions.(index)>
	}; separator="\n">
	end
end
>>

/* This generates a private method since the predIndex is generated, making an
 * overriding implementation impossible to maintain.
 */
RuleSempredFunction(r, actions) ::= <<
def <r.name>_sempred( _localctx,  predIndex)
	case (predIndex)
	<actions:{index|
when <index>
	return <actions.(index)>}; separator="\n">
	end
	return true
end
>>

RuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs,namedActions,finallyAction,postamble,exceptions) ::= <<

<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

def <currentRule.name>(<args; separator=",">)
	_localctx =  <currentRule.ctxType>.new(@_ctx, @_state_number<currentRule.args:{a | , <a.name>}>)
	enter_rule(_localctx, <currentRule.startState>, RULE_<currentRule.name>)
	<namedActions.init>
	<locals; separator="\n">
	begin
<if(currentRule.hasLookaheadBlock)>
		_alt = 0
<endif>
		<code>
		<postamble; separator="\n">
		<namedActions.after>
	<if(exceptions)>
	<exceptions; separator="\n">
	<else>
	rescue Antlr4::Runtime::RecognitionException => re
		_localctx.exception = re
		@_err_handler.report_error(self, re)
		@_err_handler.recover(self, re)
	<endif>
	ensure
		<finallyAction>
		exit_rule()
	end
	return _localctx
end
>>

LeftRecursiveRuleFunction(currentRule,args,code,locals,ruleCtx,altLabelCtxs,
	namedActions,finallyAction,postamble) ::=
<<

<ruleCtx>
<altLabelCtxs:{l | <altLabelCtxs.(l)>}; separator="\n">

def<currentRule.name>(<args; separator=", ">)
	return <currentRule.name>(0<currentRule.args:{a | , <a.name>}>)
end

def <currentRule.name>( _p<args:{a | , <a>}>)
	 _parentctx = _ctx
	 _parentState = @_state_number
	_localctx =  <currentRule.ctxType>.new(_ctx, _parentState<currentRule.args:{a | , <a.name>}>)
	 @_prevctx = _localctx
	 _startState = <currentRule.startState>
	enterRecursionRule(_localctx, <currentRule.startState>, RULE_<currentRule.name>, _p)
	<namedActions.init>
	<locals; separator="\n">
	begin
<if(currentRule.hasLookaheadBlock)>
		 _alt
<endif>
		<code>
		<postamble; separator="\n">
		<namedActions.after>

	rescue Antlr4::Runtime::RecognitionException => re
		_localctx.exception = re
		@_err_handler.report_error(self, re)
		@_err_handler.recover(self, re)

	ensure
		<finallyAction>
		unrollRecursionContexts(_parentctx)
	end
	return _localctx
end
>>

CodeBlockForOuterMostAlt(currentOuterMostAltCodeBlock, locals, preamble, ops) ::= <<
<if(currentOuterMostAltCodeBlock.altLabel)>_localctx =  <currentOuterMostAltCodeBlock.altLabel; format="cap">Context.new(_localctx)<endif>
enter_outer_alt(_localctx, <currentOuterMostAltCodeBlock.alt.altNum>)
<CodeBlockForAlt(currentAltCodeBlock=currentOuterMostAltCodeBlock, ...)>
>>

CodeBlockForAlt(currentAltCodeBlock, locals, preamble, ops) ::= <<

<locals; separator="\n">
<preamble; separator="\n">
<ops; separator="\n">
>>

LL1AltBlock(choice, preamble, alts, error) ::= <<
@_state_number = <choice.stateNumber>
@_err_handler.sync(self)
<if(choice.label)><labelref(choice.label)> = @_input.LT(1)<endif>
<preamble; separator="\n">
case (@_input.la(1))
<if(choice.altLook && alts)>
<choice.altLook, alts:{look, alt | when <look:{l | <parser.name>::<l>}; separator=", ">
	<alt>}; separator="\n\n">
<endif>
else
	<error>
end
>>

LL1OptionalBlock(choice, alts, error) ::= <<
@_state_number = <choice.stateNumber>
@_err_handler.sync(self)
case (@_input.la(1))
<choice.altLook,alts:{look,alt| <cases(ttypes=look)>
	<alt>
	}; separator="\n">
else
end
>>

LL1OptionalBlockSingleAlt(choice, expr, alts, preamble, error, followExpr) ::= <<
@_state_number = <choice.stateNumber>
@_err_handler.sync(self)
<preamble; separator="\n">
if (<expr>)
	<alts; separator="\n">
end
<!else if ( !(<followExpr>) ) <error>!>
>>

LL1StarBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
@_state_number = <choice.stateNumber>
@_err_handler.sync(self)
<preamble; separator="\n">
while (<loopExpr>)
	<alts; separator="\n">
	@_state_number = <choice.loopBackStateNumber>
	@_err_handler.sync(self)
	<iteration>
end
>>

LL1PlusBlockSingleAlt(choice, loopExpr, alts, preamble, iteration) ::= <<
@_state_number = <choice.blockStartStateNumber> <! alt block decision !>
@_err_handler.sync(self)
<preamble; separator="\n">
loop do
	<alts; separator="\n">
	@_state_number = <choice.stateNumber> <! loopback/exit decision !>
	@_err_handler.sync(self)
	<iteration>
 break if (!( <loopExpr>) )
end
>>

// LL(*) stuff

AltBlock(choice, preamble, alts, error) ::= <<
@_state_number = <choice.stateNumber>
@_err_handler.sync(self)
<if(choice.label)><labelref(choice.label)> = @_input.LT(1)<endif>
<preamble; separator="\n">
case ( @_interp.adaptive_predict(@_input,<choice.decision>,@_ctx) )
<alts:{alt |
when <i>
	<alt>
	}; separator="\n">
end
>>

OptionalBlock(choice, alts, error) ::= <<
@_state_number = <choice.stateNumber>
@_err_handler.sync(self)
case ( @_interp.adaptive_predict(@_input,<choice.decision>,@_ctx) )
<alts:{alt |
when <i><if(!choice.ast.greedy)>+1<endif>
	<alt>
	}; separator="\n">
end
>>

StarBlock(choice, alts, sync, iteration) ::= <<
@_state_number = <choice.stateNumber>
@_err_handler.sync(self);
_alt = @_interp.adaptive_predict(@_input,<choice.decision>,@_ctx)
while ( _alt!=<choice.exitAlt> && _alt!=Antlr4::Runtime::ATN::INVALID_ALT_NUMBER )
	if ( _alt==1<if(!choice.ast.greedy)>+1<endif> )
		<iteration>
		<alts> <! should only be one !>
	end
	@_state_number = <choice.loopBackStateNumber>
	@_err_handler.sync(self)
	_alt = @_interp.adaptive_predict(@_input,<choice.decision>,@_ctx)
end
>>

PlusBlock(choice, alts, error) ::= <<
@_state_number = <choice.blockStartStateNumber> <! alt block decision !>
@_err_handler.sync(self)
_alt = 1<if(!choice.ast.greedy)>+1<endif>
loop do
	case (_alt)
	<alts:{alt|
when <i><if(!choice.ast.greedy)>+1<endif>
	<alt>
	}; separator="\n">
	else
		<error>
	end
	@_state_number = <choice.loopBackStateNumber> <! loopback/exit decision !>
	@_err_handler.sync(self)
	_alt = @_interp.adaptive_predict(@_input,<choice.decision>,@_ctx)
    break if !( _alt!=<choice.exitAlt> && _alt!=Antlr4::Runtime::ATN::INVALID_ALT_NUMBER )
end
>>

Sync(s) ::= "sync(<s.expecting.name>);"

ThrowNoViableAlt(t) ::= "raise Antlr4::Runtime::NoViableAltException, self"

TestSetInline(s) ::= <<
<s.bitsets:{bits | <if(rest(rest(bits.ttypes)))><bitsetBitfieldComparison(s, bits)><else><bitsetInlineComparison(s, bits)><endif>}; separator=" || ">
>>

// Ruby language spec 15.19 - shift operators mask operands rather than overflow to 0... need range test
testShiftInRange(shiftAmount) ::= <<
((<shiftAmount>) & ~0x3f) == 0
>>

// produces smaller bytecode only when bits.ttypes contains more than two items
bitsetBitfieldComparison(s, bits) ::= <%
(<testShiftInRange({<offsetShift(s.varName, bits.shift)>})> && ((1 \<\< <offsetShift(s.varName, bits.shift)>) & (<bits.ttypes:{ttype | (1 \<\< <offsetShift(ttype, bits.shift)>)}; separator=" | ">)) != 0)
%>

isZero ::= [
"0":true,
default:false
]

offsetShift(shiftAmount, offset) ::= <%
<if(!isZero.(offset))>(<shiftAmount> - <offset>)<else><shiftAmount><endif>
%>

// produces more efficient bytecode when bits.ttypes contains at most two items
bitsetInlineComparison(s, bits) ::= <%
<bits.ttypes:{ttype | <s.varName>==<ttype>}; separator=" || ">
%>

cases(ttypes) ::= <<
when <ttypes:{t | <t>}; separator=", ">
>>

InvokeRule(r, argExprsChunks) ::= <<
@_state_number = <r.stateNumber>
<if(r.labels)><r.labels:{l | <labelref(l)> = }><endif><r.name>(<if(r.ast.options.p)><r.ast.options.p><if(argExprsChunks)>,<endif><endif><argExprsChunks>)
>>

MatchToken(m) ::= <<
@_state_number = <m.stateNumber>
<if(m.labels)><m.labels:{l | <labelref(l)> = }><endif>match(<m.name>)
>>

MatchSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, false)>"

MatchNotSet(m, expr, capture) ::= "<CommonSetStuff(m, expr, capture, true)>"

CommonSetStuff(m, expr, capture, invert) ::= <<
@_state_number = <m.stateNumber>
<if(m.labels)><m.labels:{l | <labelref(l)> = }>@_input.LT(1)<endif>
<capture>
if ( <if(invert)><m.varName> \<= 0 || <else>!<endif>(<expr>) )
	<if(m.labels)><m.labels:{l | <labelref(l)> = (Token)}><endif>@_err_handler.recover_in_line(self)

else
	if ( @_input.la(1)==Antlr4::Runtime::Token::EOF )
	  @matchedEOF = true
	end
	@_err_handler.report_match(self)
	consume()
end
>>

Wildcard(w) ::= <<
@_state_number = <w.stateNumber>
<if(w.labels)><w.labels:{l | <labelref(l)> = }><endif>matchWildcard()
>>

// ACTION STUFF

Action(a, foo, chunks) ::= "<chunks>"

ArgAction(a, chunks) ::= "<chunks>"

SemPred(p, chunks, failChunks) ::= <<
@_state_number = <p.stateNumber>
if (!(<chunks>))
  raise Antlr4::Runtime::FailedPredicateException, self, <p.predicate><if(failChunks)>, <failChunks><elseif(p.msg)>, <p.msg><endif>)
end
>>

ExceptionClause(e, catchArg, catchAction) ::= <<
rescue <catchArg>
	<catchAction>
end
>>

// lexer actions are not associated with model objects

LexerSkipCommand()  ::= "skip()"
LexerMoreCommand()  ::= "more()"
LexerPopModeCommand() ::= "popMode()"

LexerTypeCommand(arg, grammar)      ::= "@_type = <arg>"
LexerChannelCommand(arg, grammar)   ::= "@_channel = <arg>"
LexerModeCommand(arg, grammar)      ::= "@_mode = <arg>"
LexerPushModeCommand(arg, grammar)  ::= "pushMode(<arg>)"

ActionText(t) ::= "<t.text>"
ActionTemplate(t) ::= "<t.st>"
ArgRef(a) ::= "_localctx.<a.name>"
LocalRef(a) ::= "_localctx.<a.name>"
RetValueRef(a) ::= "_localctx.<a.name>"
QRetValueRef(a) ::= "<ctx(a)>.<a.dict>.<a.name>"
/** How to translate $tokenLabel */
TokenRef(t) ::= "<ctx(t)>.<t.name>"
LabelRef(t) ::= "<ctx(t)>.<t.name>"
ListLabelRef(t) ::= "<ctx(t)>.<ListLabelName(t.name)>"
SetAttr(s,rhsChunks) ::= "<ctx(s)>.<s.name> = <rhsChunks>;"

TokenLabelType() ::= "<file.TokenLabelType; null={Token}>"
InputSymbolType() ::= "<file.InputSymbolType; null={Token}>"

TokenPropertyRef_text(t) ::= "(<ctx(t)>.<t.label>!=nil?<ctx(t)>.<t.label>.getText():nil)"
TokenPropertyRef_type(t) ::= "(<ctx(t)>.<t.label>!=nil?<ctx(t)>.<t.label>.getType():0)"
TokenPropertyRef_line(t) ::= "(<ctx(t)>.<t.label>!=nil?<ctx(t)>.<t.label>.getLine():0)"
TokenPropertyRef_pos(t) ::= "(<ctx(t)>.<t.label>!=nil?<ctx(t)>.<t.label>.getCharPositionInLine():0)"
TokenPropertyRef_channel(t) ::= "(<ctx(t)>.<t.label>!=nil?<ctx(t)>.<t.label>.getChannel():0)"
TokenPropertyRef_index(t) ::= "(<ctx(t)>.<t.label>!=nil?<ctx(t)>.<t.label>.getTokenIndex():0)"
TokenPropertyRef_int(t) ::= "(<ctx(t)>.<t.label>!=nil?Integer.valueOf(<ctx(t)>.<t.label>.getText()):0)"

RulePropertyRef_start(r) ::= "(<ctx(r)>.<r.label>!=nil?(<ctx(r)>.<r.label>.start):nil)"
RulePropertyRef_stop(r)	 ::= "(<ctx(r)>.<r.label>!=nil?(<ctx(r)>.<r.label>.stop):nil)"
RulePropertyRef_text(r)	 ::= "(<ctx(r)>.<r.label>!=nil?@_input.getText(<ctx(r)>.<r.label>.start,<ctx(r)>.<r.label>.stop):nil)"
RulePropertyRef_ctx(r)	 ::= "<ctx(r)>.<r.label>"
RulePropertyRef_parser(r)	 ::= "self"

ThisRulePropertyRef_start(r) ::= "_localctx.start"
ThisRulePropertyRef_stop(r)	 ::= "_localctx.stop"
ThisRulePropertyRef_text(r)	 ::= "@_input.getText(_localctx.start, @_input.LT(-1))"
ThisRulePropertyRef_ctx(r)	 ::= "_localctx"
ThisRulePropertyRef_parser(r)	 ::= "self"

NonLocalAttrRef(s)		 ::= "((<s.ruleName; format=\"cap\">Context)getInvokingContext(<s.ruleIndex>)).<s.name>"
SetNonLocalAttr(s, rhsChunks)	  ::=
	"((<s.ruleName; format=\"cap\">Context)getInvokingContext(<s.ruleIndex>)).<s.name> = <rhsChunks>;"

AddToLabelList(a) ::= "<ctx(a.label)>.<a.listName>.push(<labelref(a.label)>);"

TokenDecl(t) ::= "<TokenLabelType()> <t.name>"
TokenTypeDecl(t) ::= "<t.name> = 0"
TokenListDecl(t) ::= "<t.name> = []"
RuleContextDecl(r) ::= "<r.name> = nil"
RuleContextListDecl(rdecl) ::= "<rdecl.name> = []"

ContextTokenGetterDecl(t)      ::= <<
def <t.name>()
  return token(<parser.name>::<t.name>, 0)
end
>>
ContextTokenListGetterDecl(t)  ::= <<
def <t.name>()
 return tokens(<parser.name>::<t.name>)
end
>>
ContextTokenListIndexedGetterDecl(t)  ::= <<
def <t.name>_i( i)
	return token(<parser.name>::<t.name>, i)
end
>>
ContextRuleGetterDecl(r)       ::= <<
def <r.name>()
	return rule_context("<r.ctxName>",0)
end
>>
ContextRuleListGetterDecl(r)   ::= <<
def <r.name>()
	return rule_contexts("<r.ctxName>")
end
>>
ContextRuleListIndexedGetterDecl(r)   ::= <<
def <r.name>_i( i)
	return rule_context("<r.ctxName>",i)
end
>>

LexerRuleContext() ::= "RuleContext"

/** The rule context name is the rule followed by a suffix; e.g.,
 *	r becomes rContext.
 */
RuleContextNameSuffix() ::= "Context"

ImplicitTokenLabel(tokenName) ::= "<tokenName>"
ImplicitRuleLabel(ruleName)	  ::= "<ruleName>"
ImplicitSetLabel(id)		  ::= "_tset<id>"
ListLabelName(label)		  ::= "<label>"

CaptureNextToken(d) ::= "<d.varName> = @_input.LT(1)"
CaptureNextTokenType(d) ::= "<d.varName> = @_input.la(1)"

StructDecl(struct,ctorAttrs,attrs,getters,dispatchMethods,interfaces,extensionMembers)
	::= <<
 class <struct.name> \< <if(contextSuperClass)><contextSuperClass><else>Antlr4::Runtime::ParserRuleContext<endif><if(interfaces)> <endif>
	<attrs:{a | attr_accessor :<a>}; separator="\n">
	<getters:{g | <g>}; separator="\n">
	<if(ctorAttrs)>def initialize( parent,  invokingState) \n super(parent, invokingState)\nend<endif>
	def initialize( parent,  invokingState<ctorAttrs:{a | , <a>}>)
		super(parent, invokingState)
		<struct.ctorAttrs:{a | @<a.name> = <a.name>}; separator="\n">
	end
	def getRuleIndex()
	 return RULE_<struct.derivedFromName>
	end
<if(struct.provideCopyFrom)> <! don't need copy unless we have subclasses !>
	def initialize()
	end
	def copyFrom( ctx)
		super.copyFrom(ctx)
		<struct.attrs:{a | @<a.name> = ctx.<a.name>}; separator="\n">
	end
<endif>
	<dispatchMethods; separator="\n">
	<extensionMembers; separator="\n">
end
>>

AltLabelStructDecl(struct,attrs,getters,dispatchMethods) ::= <<
 class <struct.name> \< <currentRule.name; format="cap">Context
	<attrs:{a | attr_accessor :<a>}; separator="\n">
	<getters:{g | <g>}; separator="\n">
	def initialize(<currentRule.name; format="cap">Context ctx)
	 copyFrom(ctx)
	end
	<dispatchMethods; separator="\n">
end
>>

ListenerDispatchMethod(method) ::= <<
def <if(method.isEnter)>enter<else>exit<endif>_rule( listener)
	if ( listener.respond_to?(:<if(method.isEnter)>enter<else>exit<endif><struct.derivedFromName; format="cap">) )
	  listener.<if(method.isEnter)>enter<else>exit<endif><struct.derivedFromName; format="cap">(self)
	end
end
>>

VisitorDispatchMethod(method) ::= <<

def accept(visitor)
	if ( visitor.respond_to?(:visit<struct.derivedFromName; format="cap">) )
	  return visitor.visit<struct.derivedFromName; format="cap">(self)
	else
	 return visitor.visit_children(self)
	end
end
>>

AttributeDecl(d) ::= "<d.type> <d.name><if(d.initValue)> = <d.initValue><endif>"

/** If we don't know location of label def x, use this template */
labelref(x) ::= "<if(!x.isLocal)>((<x.ctx.name>)_localctx).<endif><x.name>"

/** For any action chunk, what is correctly-typed context struct ptr? */
ctx(actionChunk) ::= "((<actionChunk.ctx.name>)_localctx)"

// used for left-recursive rules
recRuleAltPredicate(ruleName,opPrec)  ::= "precpred(@_ctx, <opPrec>)"
recRuleSetReturnAction(src,name)	  ::= "$<name>=$<src>.<name>"
recRuleSetStopToken()                 ::= "@_ctx.stop = @_input.LT(-1)"

recRuleAltStartAction(ruleName, ctxName, label, isListLabel) ::= <<
_localctx =  <ctxName>Context.new(_parentctx, _parentState)
<if(label)>
<if(isListLabel)>
_localctx.<label>.push(@_prevctx)
<else>
_localctx.<label> = @_prevctx
<endif>
<endif>
<if(label)>_localctx.<label> = @_prevctx<endif>
pushNewRecursionContext(_localctx,@ _startState, RULE_<ruleName>)
>>

recRuleLabeledAltStartAction(ruleName, currentAltLabel, label, isListLabel) ::= <<
_localctx =  <currentAltLabel; format="cap">Context.new( <ruleName; format="cap">Context.new(_parentctx, _parentState))
<if(label)>
<if(isListLabel)>
_localctx.<label>.push(@_prevctx)
<else>
_localctx.<label> = @_prevctx
<endif>
<endif>
pushNewRecursionContext(_localctx, @_startState, RULE_<ruleName>)
>>

recRuleReplaceContext(ctxName) ::= <<
_localctx = <ctxName>Context.new(_localctx)
@_ctx = _localctx
@_prevctx = _localctx
>>

recRuleSetPrevCtx() ::= <<
if ( @_parseListeners!=nil )
 triggerExitRuleEvent()
end
@_prevctx = _localctx
>>


LexerFile(lexerFile, lexer, namedActions) ::= <<
<fileHeader(lexerFile.grammarFileName, lexerFile.ANTLRVersion)>
<namedActions.header>
require 'antlr4/runtime'

<if(lexerFile.genPackage)>
module <lexerFile.genPackage>
<endif>

<lexer>

<if(lexerFile.genPackage)>
end
<endif>
>>

Lexer(lexer, atn, actionFuncs, sempredFuncs, superClass) ::= <<

class <lexer.name> <"\<"> <superClass; null="Antlr4::Runtime::Lexer">

	@_shared_context_cache = Antlr4::Runtime::PredictionContextCache.new
	<if(lexer.tokens)>
		<lexer.tokens:{k | <k>=<lexer.tokens.(k)>}; separator="\n", wrap, anchor>
	<endif>
	<if(lexer.channels)>
		<lexer.channels:{c | <c>=<lexer.channels.(c)>}; separator="\n", wrap, anchor>
	<endif>
	<if(rest(lexer.modes))>
		<rest(lexer.modes):{m | <m>=<i>}; separator="\n", wrap, anchor>
	<endif>
	@@channelNames = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"<if (lexer.channels)>, <lexer.channels:{c| "<c>"}; separator=", ", wrap, anchor><endif>
	]

	@@modeNames = [
		<lexer.modes:{m| "<m>"}; separator=", ", wrap, anchor>
	]

	@@ruleNames  = [
			<lexer.ruleNames:{r | "<r>"}; separator=", ", wrap, anchor>
	]

	<vocabulary(lexer.literalNames, lexer.symbolicNames)>

	<namedActions.members>

	<atn>

	class \<\< self
		@@_decisionToDFA = []
	end

	def initialize(input)
		super(input)

		i = 0
		while i \< @@_ATN.number_of_decisions()
			@@_decisionToDFA[i] = Antlr4::Runtime::DFA.new(@@_ATN.decision_state(i), i)
			i+=1
		end

		@_interp = Antlr4::Runtime::LexerATNSimulator.new(self,@@_ATN,@@_decisionToDFA,@_sharedContextCache)
	end

	def getGrammarFileName()
	 return "<lexer.grammarFileName>"
	end

	def rule_names()
	 return @@ruleNames
	end

	def serialized_atn()
	  return @@_serializedATN
	end

	def channel_names()
	  return @@channelNames
	end

	def mode_names()
	  return @@modeNames
	end

	def atn()
	 return @@_ATN
	end

	<dumpActions(lexer, "", actionFuncs, sempredFuncs)>
end
>>

SerializedATN(model) ::= <<
<if(rest(model.segments))>
@@_serializedATNSegments = <length(model.segments)>
<model.segments:{segment|@@_serializedATNSegment<i0> =
	"<segment; wrap={"+<\n><\t>"}>"}; separator="\n">
@@_serializedATN = [<model.segments:{segment | @@_serializedATNSegment<i0>}; separator=",\n">].join("")
<else>
@@_serializedATN = ["<model.serialized; wrap={",<\n>    "}>"].join("")
<endif>

@@_ATN = Antlr4::Runtime::ATNDeserializer.new().deserialize(@@_serializedATN)

>>

/** Using a type to init value map, try to init a type; if not in table
 *	must be an object, default value is "nil".
 */
initValue(typeName) ::= <<
<rubyTypeInitMap.(typeName)>
>>

codeFileExtension() ::= ".rb"
